// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String   @unique
  image         String?
  emailVerified DateTime?
  role          String   @default("editor") // "admin" or "editor"
  createdAt     DateTime @default(now())
  sessions      Session[]
  accounts      Account[]
}

model SiteConfig {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  ownerName String
  title     String
  tagline   String?
  socials   Json?
  theme     Json?
}

model About {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  content String
  avatar  String?
  order   Int    @default(0)
}

model Skill {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  icon     String?
  level    Int
  category String
  order    Int @default(0)
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  techStack   String[]
  liveUrl     String?
  githubUrl   String?
  imageUrl    String?
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Experience {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role      String
  company   String
  startDate String
  endDate   String?
  bullets   String[]
  order     Int      @default(0)
}

model ContactMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
